version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-api
    restart: always
    env_file:
      - .env
    environment:
      - QDRANT_URL=http://qdrant:6333
      - MEILI_URL=http://meilisearch:7700
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    depends_on:
      - qdrant
      - meilisearch
      - neo4j
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    volumes:
      - ./data/qdrant:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exec 3<>/dev/tcp/localhost/6333 && echo -e 'GET /readiness HTTP/1.1\r\nHost: localhost\r\n\r\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: meilisearch
    environment:
      - MEILI_MASTER_KEY=${MEILI_API_KEY:-masterKey}
      - MEILI_NO_ANALYTICS=true
    volumes:
      - meili-data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  neo4j:
    image: neo4j:4.4
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:7474/browser/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Optional: Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - agent-network
    restart: unless-stopped
    depends_on:
      - prometheus

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped

networks:
  agent-network:
    driver: bridge

volumes:
  qdrant-data:
  meili-data:
  neo4j-data:
  neo4j-logs:
  prometheus-data:
  grafana-data: 