[
  {
    "id": "IDEA-001",
    "area": "LLM & Embedding",
    "task": "Decouple Embedding Generation from Completion Provider",
    "description": "Allow configuring a separate, dedicated embedding provider/model (e.g., OpenAI, Ollama embedding model, SentenceTransformers) especially when the main completion provider (like OpenRouter) lacks embedding support. This involves modifying CodeAgent.__init__ and potentially VectorStoreManager.",
    "priority": "High",
    "status": "todo"
  },
  {
    "id": "IDEA-002",
    "area": "LLM & Embedding",
    "task": "Improve LLM Provider Resilience",
    "description": "Implement health checks for configured LLM providers during initialization. Add more robust error handling and potential automatic fallback logic if the primary provider fails during runtime.",
    "priority": "Medium",
    "status": "todo"
  },
  {
    "id": "IDEA-003",
    "area": "Query Understanding",
    "task": "Refine Reflector Clarity Assessment",
    "description": "Further adjust the assess_query_clarity prompt to reduce unnecessary clarification requests. Consider providing more detailed code context (e.g., snippet summaries) instead of just file paths. Explore heuristics (like checking for file paths) before calling the LLM.",
    "priority": "Medium",
    "status": "todo"
  },
  {
    "id": "IDEA-004",
    "area": "Query Understanding",
    "task": "Implement Interactive Clarification Options",
    "description": "When a query is deemed ambiguous, instead of just asking a question, present potential interpretations or relevant files/functions as options for the user to select from.",
    "priority": "Low",
    "status": "todo"
  },
  {
    "id": "IDEA-005",
    "area": "Planning",
    "task": "Enhance Plan Generation & Validation",
    "description": "Improve the Planner's robustness. Add validation for plans generated by the LLM. Make default plan generation more context-aware based on the query type. Ensure decomposed queries are effectively used in subsequent plan steps (e.g., multiple searches).",
    "priority": "Medium",
    "status": "todo"
  },
  {
    "id": "IDEA-006",
    "area": "Tool Integration",
    "task": "Resolve Docker Sandbox Initialization Issue",
    "description": "Investigate the 'FileNotFoundError' for the Docker socket. Improve error reporting with potential causes (Docker not running, permissions, incorrect socket path). Add configuration options or environment variable checks (DOCKER_HOST) for the socket path. Add checks/instructions for Docker status.",
    "priority": "High",
    "status": "todo"
  },
  {
    "id": "IDEA-007",
    "area": "Tool Integration",
    "task": "Complete TOOL-003 Enhancements",
    "description": "Implement pagination, rate limit handling, and improved error parsing/reporting for GitHubSearchProvider and StackOverflowSearchProvider as defined in the original improvements-tasks.json.",
    "priority": "Medium",
    "status": "todo"
  },
  {
    "id": "IDEA-008",
    "area": "Tool Integration",
    "task": "Enhance Apply Fix Safety and Functionality",
    "description": "Add user confirmation or a diff preview step before applying code changes. Implement the logic to parse and apply changes based on the 'changes' array in the fix details, not just overwriting with 'fixed_code'.",
    "priority": "High",
    "status": "todo"
  },
  {
    "id": "IDEA-009",
    "area": "Vector Store",
    "task": "Ensure Consistent Vector Search Parameters",
    "description": "Review VectorStoreManager.search_code and its callers (CodeAgent, PlanExecutor) to ensure parameters like 'limit' or 'top_k' are consistently supported and used.",
    "priority": "Low",
    "status": "todo"
  },
  {
    "id": "IDEA-010",
    "area": "Vector Store",
    "task": "Explore Advanced Search Techniques",
    "description": "Research and potentially implement hybrid search (keyword + vector) or reranking models within the VectorStoreManager to improve search relevance.",
    "priority": "Low",
    "status": "todo"
  },
  {
    "id": "IDEA-011",
    "area": "Architecture & UX",
    "task": "Standardize Configuration",
    "description": "Consolidate and clarify the configuration approach using BaseSettings, .env, and config.py to avoid potential conflicts or confusion.",
    "priority": "Low",
    "status": "todo"
  },
  {
    "id": "IDEA-012",
    "area": "Architecture & UX",
    "task": "Improve Logging and User Feedback",
    "description": "Enhance logging with more contextual information. Provide clearer, real-time progress updates to the user during plan execution. Make runtime error messages more informative.",
    "priority": "Medium",
    "status": "todo"
  },
  {
    "id": "IDEA-013",
    "area": "Code Quality",
    "task": "Continue Refactoring and Testing",
    "description": "Continue breaking down large classes like CodeAgent and PlanExecutor. Add more unit and integration tests to cover core logic, tool integrations, and edge cases (related to CODE-001 and CODE-002).",
    "priority": "Medium",
    "status": "todo"
  }
] 