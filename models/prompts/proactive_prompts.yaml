# Prompts for Proactive Analysis and Solution Generation

generate_dependency_update_fix:
  # Input context should include: issue_type, file_path, item_name, current_version, latest_version
  # Optionally, include local code snippets using the dependency if available.
  |-
    Given the following outdated dependency issue:
    File: {file_path}
    Package: {item_name}
    Current Specifier: {details[local_specifier]}
    Latest Version: {details[latest_version]}
    
    Analyze the required change to update the dependency in the specified file.
    Consider the file type ({file_path}) and the package manager conventions.
    
    Output ONLY a JSON object with the following structure:
    ```json
    {{
      "status": "success",
      "fix_type": "update_dependency_file",
      "file_path": "{file_path}",
      "package_name": "{item_name}",
      "new_version": "{details[latest_version]}",
      "explanation": "Update {item_name} from {details[local_specifier]} to {details[latest_version]} in {file_path}."
    }}
    ```
    
    If you cannot determine the necessary update or if there's ambiguity, output:
    ```json
    {{
      "status": "error",
      "explanation": "Could not determine the exact update format for {file_path}. Manual review needed."
    }}
    ```

# Add more prompts here for:
# - Analyzing vulnerability reports
# - Suggesting refactoring based on best practices
# - Generating code patches for deprecated API usage, etc. 